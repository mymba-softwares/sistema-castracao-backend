
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  role: 'role',
  email: 'email',
  hashedPassword: 'hashedPassword',
  completeName: 'completeName',
  cpf: 'cpf',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  recoveryMode: 'recoveryMode'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jwt: 'jwt',
  refreshJwt: 'refreshJwt'
};

exports.Prisma.PetOwnerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fullAddress: 'fullAddress'
};

exports.Prisma.CommitmentTermScalarFieldEnum = {
  id: 'id',
  petOwnerId: 'petOwnerId',
  signatureDate: 'signatureDate',
  documentUrl: 'documentUrl'
};

exports.Prisma.VeterinarianScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  crmv: 'crmv',
  active: 'active'
};

exports.Prisma.AnimalScalarFieldEnum = {
  id: 'id',
  petOwnerId: 'petOwnerId',
  name: 'name',
  species: 'species',
  gender: 'gender',
  estimatedAge: 'estimatedAge',
  sizeWeight: 'sizeWeight',
  breed: 'breed',
  microchipNumber: 'microchipNumber'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  animalId: 'animalId',
  petOwnerId: 'petOwnerId',
  serviceType: 'serviceType',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  notes: 'notes'
};

exports.Prisma.MedicalRecordScalarFieldEnum = {
  id: 'id',
  animalId: 'animalId',
  microchipNumber: 'microchipNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClinicalRecordScalarFieldEnum = {
  id: 'id',
  medicalRecordId: 'medicalRecordId',
  appointmentId: 'appointmentId',
  veterinarianId: 'veterinarianId',
  type: 'type',
  treatmentDate: 'treatmentDate',
  fitForSurgery: 'fitForSurgery',
  surgeryType: 'surgeryType',
  observations: 'observations',
  instructions: 'instructions'
};

exports.Prisma.UserDeviceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fcmToken: 'fcmToken',
  deviceInfo: 'deviceInfo',
  createdAt: 'createdAt',
  lastActiveAt: 'lastActiveAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  read: 'read',
  channel: 'channel',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.BulletinScalarFieldEnum = {
  id: 'id',
  createdByUserId: 'createdByUserId',
  title: 'title',
  message: 'message',
  targetRoles: 'targetRoles',
  createdAt: 'createdAt'
};

exports.Prisma.SystemLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  targetTable: 'targetTable',
  targetId: 'targetId',
  action: 'action',
  description: 'description',
  type: 'type',
  originIp: 'originIp',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  administrator: 'administrator',
  semas: 'semas',
  veterinarian: 'veterinarian',
  receptionist: 'receptionist',
  petOwner: 'petOwner',
  student: 'student'
};

exports.Species = exports.$Enums.Species = {
  canine: 'canine',
  feline: 'feline'
};

exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female'
};

exports.ServiceType = exports.$Enums.ServiceType = {
  triage: 'triage',
  castrationSurgery: 'castrationSurgery',
  postOperative: 'postOperative'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  scheduled: 'scheduled',
  confirmed: 'confirmed',
  completed: 'completed',
  canceled: 'canceled',
  absent: 'absent'
};

exports.ClinicalRecordType = exports.$Enums.ClinicalRecordType = {
  triage: 'triage',
  surgery: 'surgery',
  followUp: 'followUp'
};

exports.SurgeryType = exports.$Enums.SurgeryType = {
  orchiectomy: 'orchiectomy',
  ovariohysterectomy: 'ovariohysterectomy'
};

exports.NotificationChannel = exports.$Enums.NotificationChannel = {
  push: 'push',
  email: 'email',
  whatsapp: 'whatsapp'
};

exports.Target = exports.$Enums.Target = {
  all: 'all',
  petOwners: 'petOwners',
  semas: 'semas',
  veterinarians: 'veterinarians',
  receptionists: 'receptionists'
};

exports.LogType = exports.$Enums.LogType = {
  info: 'info',
  warning: 'warning',
  error: 'error',
  security: 'security',
  audit: 'audit'
};

exports.Prisma.ModelName = {
  User: 'User',
  Token: 'Token',
  PetOwner: 'PetOwner',
  CommitmentTerm: 'CommitmentTerm',
  Veterinarian: 'Veterinarian',
  Animal: 'Animal',
  Appointment: 'Appointment',
  MedicalRecord: 'MedicalRecord',
  ClinicalRecord: 'ClinicalRecord',
  UserDevice: 'UserDevice',
  Notification: 'Notification',
  Bulletin: 'Bulletin',
  SystemLog: 'SystemLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
